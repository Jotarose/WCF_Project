//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MathService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tuple", Namespace="http://schemas.datacontract.org/2004/07/MathService")]
    public partial class Tuple : object
    {
        
        private double[] DataField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double[] Data
        {
            get
            {
                return this.DataField;
            }
            set
            {
                this.DataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathService.IMath")]
    public interface IMath
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Prime", ReplyAction="http://tempuri.org/IMath/PrimeResponse")]
        bool Prime(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Prime", ReplyAction="http://tempuri.org/IMath/PrimeResponse")]
        System.Threading.Tasks.Task<bool> PrimeAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/sumaInterna", ReplyAction="http://tempuri.org/IMath/sumaInternaResponse")]
        MathService.Tuple sumaInterna(MathService.Tuple tupla);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/sumaInterna", ReplyAction="http://tempuri.org/IMath/sumaInternaResponse")]
        System.Threading.Tasks.Task<MathService.Tuple> sumaInternaAsync(MathService.Tuple tupla);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/resolverEcuaciones", ReplyAction="http://tempuri.org/IMath/resolverEcuacionesResponse")]
        double[] resolverEcuaciones(double[] matrix, double[] doubles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/resolverEcuaciones", ReplyAction="http://tempuri.org/IMath/resolverEcuacionesResponse")]
        System.Threading.Tasks.Task<double[]> resolverEcuacionesAsync(double[] matrix, double[] doubles);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IMathChannel : MathService.IMath, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class MathClient : System.ServiceModel.ClientBase<MathService.IMath>, MathService.IMath
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MathClient(EndpointConfiguration endpointConfiguration) : 
                base(MathClient.GetBindingForEndpoint(endpointConfiguration), MathClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MathClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MathClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MathClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MathClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MathClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool Prime(int value)
        {
            return base.Channel.Prime(value);
        }
        
        public System.Threading.Tasks.Task<bool> PrimeAsync(int value)
        {
            return base.Channel.PrimeAsync(value);
        }
        
        public MathService.Tuple sumaInterna(MathService.Tuple tupla)
        {
            return base.Channel.sumaInterna(tupla);
        }
        
        public System.Threading.Tasks.Task<MathService.Tuple> sumaInternaAsync(MathService.Tuple tupla)
        {
            return base.Channel.sumaInternaAsync(tupla);
        }
        
        public double[] resolverEcuaciones(double[] matrix, double[] doubles)
        {
            return base.Channel.resolverEcuaciones(matrix, doubles);
        }
        
        public System.Threading.Tasks.Task<double[]> resolverEcuacionesAsync(double[] matrix, double[] doubles)
        {
            return base.Channel.resolverEcuacionesAsync(matrix, doubles);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMath))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IMath))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMath))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost/Design_Time_Addresses/MathService/Math/");
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IMath))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8082/Math");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMath,
            
            NetTcpBinding_IMath,
        }
    }
}
